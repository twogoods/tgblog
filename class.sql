/*
 Navicat Premium Data Transfer

 Source Server         : localhost
 Source Server Type    : MySQL
 Source Server Version : 50625
 Source Host           : localhost
 Source Database       : class3

 Target Server Type    : MySQL
 Target Server Version : 50100
 File Encoding         : utf-8

 Date: 08/28/2015 16:34:08 PM
*/

SET NAMES utf8;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
--  Table structure for `blogarticles`
-- ----------------------------
DROP TABLE IF EXISTS `blogarticles`;
CREATE TABLE `blogarticles` (
	`pid` int(11) NOT NULL AUTO_INCREMENT,
	`uid` varchar(255) DEFAULT NULL,
	`content` text DEFAULT NULL,
	`time` timestamp NULL ON UPDATE CURRENT_TIMESTAMP DEFAULT NULL,
	PRIMARY KEY (`pid`)
) ENGINE=`InnoDB` AUTO_INCREMENT=12 DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ROW_FORMAT=COMPACT COMMENT='' CHECKSUM=0 DELAY_KEY_WRITE=0;

-- ----------------------------
--  Records of `blogarticles`
-- ----------------------------
BEGIN;
INSERT INTO `blogarticles` VALUES ('1', '201203870301', '## IOC\nspring的IOC容器初始化分3步：Resource定位，BeanDefinition的载入，向ioc容器注册这些BeanDefinition。  \n整个的启动是在`refersh()`方法里\n```\npublic FileSystemXmlApplicationContext(String[] configLocations, boolean refresh,             ApplicationContext parent)throws BeansException {\n    super(parent);\n    setConfigLocations(configLocations);\n    if (refresh) {\n    //启动初始化\n    refresh();\n    }\n}\n```\n启动之后会来到`AbstractRefreshableApplicationContext`的`refreshBeanFactory()`方法\n```\nprotected final void refreshBeanFactory() throws BeansException {\n    	 if (hasBeanFactory()) {\n        	 destroyBeans();\n        	 closeBeanFactory();\n    	 }\n    	 try {\n     //IOC容器，这里是DefaultListableBeanFactory\n        	 DefaultListableBeanFactory beanFactory = createBeanFactory();\n        	 beanFactory.setSerializationId(getId());\n        	 customizeBeanFactory(beanFactory);\n       //载入\n        	 loadBeanDefinitions(beanFactory);\n        	 synchronized (this.beanFactoryMonitor) {\n        	 this.beanFactory = beanFactory;\n    	 }\n    	 }\n    	 catch (IOException ex) {\n    	    	 throw new ApplicationContextException(\"I/O error parsing bean definition source for \" + getDisplayName(), ex);\n    	 }\n}\n```\nload到`DefaultBeanDefinitionDocumentReader`,进行注册\n```\nprotected void doRegisterBeanDefinitions(Element root) {\n        \n        	 BeanDefinitionParserDelegate parent = this.delegate;\n        	 this.delegate = createDelegate(getReaderContext(), root, parent);\n        	 if (this.delegate.isDefaultNamespace(root)) {\n            	 String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);\n            	 if (StringUtils.hasText(profileSpec)) {\n                	 String[] specifiedProfiles = StringUtils.tokenizeToStringArray(\n                	 profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);\n            	 if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {\n            	    	 return;\n            	    	 }\n            	 }\n        	 }\n        \n        	 preProcessXml(root);\n        //进行bean的注册\n        	 parseBeanDefinitions(root, this.delegate);\n        	 postProcessXml(root);\n        \n        	 this.delegate = parent;\n}\n```\n具体的注册查看`DefaultListableBeanFactory`的`registerBeanDefinition()`方法\n\n\n##AOP\nAdvice(通知，定义在连接点做什么)，Pointcut(切点，决定Advice通知应该作用于哪个连接点)，\nAdvisor(通知器，用于结合Advice，Pointcut)', '2015-07-31 00:00:00'), ('2', '201203870301', '# Git \n1. 设置Git的user name和email：\n`$ git config --global user.name \"XXX\"`\n`$ git config --global user.email \"XXX@gmail.com\"`\n2. 键入命令：`ssh-keygen -t rsa -C \"email@email.com\"`\n\"email@email.com\"是git账号；\n3. 提醒你输入key的名称，输入如id_rsa；\n4. 在C:\\Documents and Settings\\Administrator\\下产生两个文件：id_rsa和id_rsa.pub；\n5. 把4中生成的密钥文件复制到C:\\Documents and Settings\\Administrator\\.ssh\\ 目 录下；\n6. 用记事本打开id_rsa.pub文件，复制内容，在github.com的网站上到ssh密钥管理页面，添加新公钥，随便取个名字，内容粘贴刚才复制的内容；\n\n创建 	`git init`  \n添加到版本库 	 `git add readme.txt`  \n提交到本地	`git commit -m \"fiorst commit\"`  \n版本回退  	`git reset --hard commit_id（head、head^、head~100`  \n查看状态	 `git status`  \n克隆    	`git clone XXXXX`  \n撤销文件的修改 	`git checkout -- readme.txt`  \n创建分支 	`git branch \"name\"`  \n\n切换分支   	 `git checkout \"name\"`  \n创建分支+切换 	 `git checkout -b \"branchname\"`  \n合并某分支到当前分支	`git merge \"name\"`  \n删除分支    	`git branch -d \"name\"`  \n查看分支  	 `git branch`  \n查看分支图    `git log --graph`  \n添加远程库	`git remote add origin https://git……`  \n\n来自廖雪峰的教程http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/', '2015-07-31 16:47:41'), ('3', '201203870301', '# Jsonp\n一次面试的时候被问到了跨域请求，提到了jsonp但一直没好好去看，今天再一次碰到这个，就好好的了解了一下。\n这篇文章讲了[原理][1]，而且比较容易懂,推荐一看。\njsonp主要是利用`<script type=\"text/javascript\" src=\"scripts/jquery.min.js\"></script>`\n中的src可以跨域获取数据，既然是通过script标签的src属性来请求，那么当然jsonp只有get方式的请求喽。\n\n  [1]: http://www.cnblogs.com/yuzhongwusan/archive/2012/12/11/2812849.html', '2015-08-01 15:38:41'), ('4', '201203870301', '# 面试题\n1、往浏览器中输入一个URL后都发生了什么 ？\n\n- 浏览器向DNS服务器查找输入URL对应的IP地址。\n\n- DNS服务器返回网站的IP地址。\n\n- 浏览器根据IP地址与目标web服务器在80端口上建立TCP连接\n\n- 浏览器获取请求页面的html代码。\n\n- 浏览器在显示窗口内渲染HTML。\n\n- 窗口关闭时，浏览器终止与服务器的连接。', '2015-08-01 15:44:15'), ('7', '201203870310', '# java的异常\n平时都不太注意异常的处理，随意的try-catch一下，就像这样  \n ```\n 		try {\n			return 10 / i;\n		} catch (Exception e) {\n			e.printStackTrace();\n		} finally {\n		}\n		\n ```\n真正在项目中如果就这样异常的信息只打印在了控制台，log上是没有的，一般都会这样\n ```\n 		try {\n			return 10 / i;\n		} catch (Exception ex) {\n			throw new Exception(\"exception\");\n		} finally {\n		}\n ```\ntry-catch后重新抛出一个异常（当然最好自己定义一个异常类，抛出自己定义的异常），一层一层抛，最后可以统一处理异常。\nio中的异常处理：\n在涉及java的io时典型的写法是这样\n ```\n		InputStream input = null;\n		OutputStream output = null;\n		byte[] buffer=new byte[1024];\n		try {\n			input = new FileInputStream(\"XXX\");\n			output = new FileOutputStream(\"YYY\");\n			while(input.read(buffer) != -1) {\n				output.write(buffer);\n			}\n		} catch (IOException e) {\n		} finally {\n			if (input != null) {\n				try {\n					input.close();\n				} catch (IOException e) {\n				}\n			}\n			if (output != null) {\n				try {\n					output.close();\n				} catch (IOException e) {\n				}\n			}\n		}\n```\n由于要处理各种异常，代码变的特别丑陋，这里异常处理模板就派上用场了  \n模板1：抽象类\n```\npublic abstract class InputStreamProcessingTemplate {\n	public void process(String fileName) {\n		InputStream input = null;\n		try {\n			input = new FileInputStream(fileName);\n			doProcess(input);\n		} catch (IOException e) {\n		} finally {\n			if (input != null) {\n				try {\n					input.close();\n				} catch (IOException e) {\n				}\n			}\n		}\n	}\n\n	public abstract void doProcess(InputStream input)throws IOException;\n}\n```\n接下来如何使用\n```\nnew InputStreamProcessingTemplate(){\n        public void doProcess(InputStream input) \n        throws IOException{\n            int inChar = input.read();\n            while(inChar !- -1){\n                //do something with the chars...\n            }\n        }\n    }.process(\"someFile.txt\");\n```\n模板2：接口方式\n先统一声明一个处理具体业务代码的接口,流怎么使用都在这里实现\n```\npublic interface InputStreamProcessor {\n	public void process(InputStream input) throws IOException;\n}\n```\n处理模板\n```\npublic class InputStreamProcessingTemplate2 {\n	public static void process(String fileName,\n	InputStreamProcessor processor){\n		InputStream input = null;\n		try {\n			input = new FileInputStream(fileName);\n			processor.process(input);\n		} catch (IOException e) {\n		} finally {\n			if (input != null) {\n				try {\n					input.close();\n				} catch (IOException e) {\n				}\n			}\n		}\n	}\n}	\n```  \n具体使用传入匿名内部类  \n```\nInputStreamProcessingTemplate2.process(\"e://1.txt\",\n            new InputStreamProcessor() {\n			@Override\n			public void process(InputStream input) \n			throws IOException {\n				int data = input.read();\n				while (data != -1) {\n					System.out.println((char) data);\n					data = input.read();\n				}\n			}\n		});\n```\n这样一来我们使得代码就变得比较整洁，当然从Java7开始，一种新的被称作“try-with-resource”的异常处理机制被引入进来，也可以像这样使用，它会确保流在使用完被正确关闭。\n```\ntry(FileInputStream input = new FileInputStream(\"file.txt\")) {\n	        int data = input.read();\n	        while(data != -1){\n	            System.out.print((char) data);\n	            data = input.read();\n	        }\n	    } catch (IOException e) {\n			e.printStackTrace();\n		}\n```', '2015-08-04 15:46:27'), ('8', '201203870310', '### 写在前面\n其实一直在搞java，不过学的时候还是了解过前端的技术,虽然都是程序员但前端工程师还是能跟美的页面在打交道，而我们后台的美在某种程度上似乎更抽象一些，整洁的代码，优雅的解决方案。。。（我不说下去了，你肯定想呵呵了）\n### 为什么会有它\njava总是跟企业级开发联系在一起，写写小东西还不如php,js这样的来的方便，也是很巧突然有想给班级做个展示页面的想法。然而毕竟是一个人干，没有设计师没有UI我也不会ps，虽说大致知道什么是美，但由着自己去创造美总是困难的，所以你看到的页面相对比较简洁能留白的地方都留了白，可是这一个页面也太单调了吧！后来呢想到给小伙伴们一个页面展示展示自己的所感所想吧，尼玛，这不就是博客嘛！当初知道js能写后台就果断的去了解了node,这个博客也算是自己学node 的一个helloworld吧！\n### 一点点希望\n可能大家不会经常去用它，毕竟它的功能还太弱，但各位亲好歹把头像换一换吧，算是支持一下吧。当然有机会我还是会继续改进一下的至少把该有的功能都给它加上。  \nok就这样，enjoy~', '2015-08-04 15:50:49');
COMMIT;

-- ----------------------------
--  Table structure for `user`
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
	`id` int(11) NOT NULL AUTO_INCREMENT,
	`uid` varchar(255) DEFAULT NULL,
	`password` varchar(255) DEFAULT NULL,
	`name` varchar(255) DEFAULT NULL,
	`headurl` varchar(500) DEFAULT NULL,
	`mark` varchar(255) DEFAULT NULL,
	`tags` varchar(255) DEFAULT NULL,
	PRIMARY KEY (`id`)
) ENGINE=`InnoDB` AUTO_INCREMENT=32 DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ROW_FORMAT=COMPACT COMMENT='' CHECKSUM=0 DELAY_KEY_WRITE=0;

-- ----------------------------
--  Records of `user`
-- ----------------------------
BEGIN;
INSERT INTO `user` VALUES ('1', '201203870301', '201203870301', '陈歆', 'http://up.qqjia.com/z/14/tu17208_6.jpg', '当你的才华还撑不起你的野心时，那你就应该静下心来学习~', '学霸,工大,吃货,懒癌,月光族'), ('2', '201203870302', '201203870302', '陈尧', 'https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=4100248706,3767578777&fm=111&gp=0.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('3', '201203870303', '201203870303', '方敏', 'https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3801615762,3351447178&fm=111&gp=0.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('4', '201203870304', '201203870304', '黄梓俊 ', 'https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2337150407,3398311984&fm=116&gp=0.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('5', '201203870305', '201203870305', '金龙', 'https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2205791892,1328528914&fm=116&gp=0.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('6', '201203870306', '201203870306', '李永伟 ', 'http://www.qjis.com/uploads/allimg/120704/105PU344-15.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('7', '201203870307', '201203870307', '林超 ', 'http://img1.2345.com/duoteimg/qqTxImg/2013/12/ka_3/04-054658_103.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('8', '201203870308', '201203870308', '林泽斌', 'http://www.qqbody.com/uploads/allimg/201409/10-160540_880.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('9', '201203870309', '201203870309', '刘迪', 'http://www.qqzhi.com/uploadpic/2014-10-02/135330164.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('10', '201203870310', '201203870310', '卢豪帅', 'http://wx.qlogo.cn/mmopen/Q3auHgzwzM62RaTxib662SXRFWaovUYlMLEVaHM23ge2vjvZ6SnSxqwAXDynkzCTZRYkPTuFZJzmC1psbH7icf5O5CdLNVThGW9akh9onYULY/0', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('11', '201203870311', '201203870311', '卢晓波', 'http://www.qqzhi.com/uploadpic/2014-11-29/114014876.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('12', '201203870312', '201203870312', '潘林沛', 'http://img.popoho.com/UploadPic/2011-7/201177131939882.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('13', '201203870313', '201203870313', '秦晋', 'http://img5q.duitang.com/uploads/item/201506/29/20150629222217_mz5RF.jpeg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('14', '201203870314', '201203870314', '沈松', 'http://img.store.sogou.com/net/a/05/link?appid=100520033&url=http%3A%2F%2Fwww.qqw21.com%2Farticle%2FUploadPic%2F2012-10%2F201210229441110298.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('15', '201203870315', '201203870315', '沈涛', 'http://imgq.duitang.com/uploads/item/201408/29/20140829235102_5JZTK.jpeg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('16', '201203870317', '201203870317', '王豪帅', 'http://img4q.duitang.com/uploads/item/201504/04/20150404H0051_HyRvJ.jpeg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('17', '201203870318', '201203870318', '王洪硕', 'http://image.tianjimedia.com/uploadImages/upload/20140912/upload/201409/u4rgfkdwsg0jpg.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('18', '201203870319', '201203870319', '王楠', 'http://www.qjis.com/uploads/allimg/130401/110439A91-5.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('19', '201203870320', '201203870320', '徐晓圳', 'http://qq1234.org/uploads/allimg/140714/3_140714160149_2.png', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('20', '201203870321', '201203870321', '游宇乐', 'http://www.qqzhi.com/uploadpic/2014-05-05/080428617.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('21', '201203870322', '201203870322', '俞红鹏', 'http://touxiang.vipyl.com/attached/image/20130330/20130330165083748374.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('22', '201203870323', '201203870323', '张千伟', 'http://up.qqjia.com/z/04/tu6127_10.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('23', '201203870324', '201203870324', '张永达', 'http://diy.qqjay.com/u2/2012/1014/26a705ecfbf5d04b3b69129696bcc13d.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('24', '201203870325', '201203870325', '郑德雁', 'http://img1.2345.com/duoteimg/qqTxImg/2013/04/22/13667110904.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('25', '201203870326', '201203870326', '郑恒火', 'http://img1.2345.com/duoteimg/qqTxImg/2013/04/22/13667110906.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('26', '201203870327', '201203870327', '郑立', 'http://img1.2345.com/duoteimg/qqTxImg/2013/04/22/13667043792.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('27', '201203870328', '201203870328', '郑仁杰', 'http://toux8.com/uploads/allimg/120417/1_120417113513_12.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('28', '201203870329', '201203870329', '周士伟', 'http://img1.2345.com/duoteimg/qqTxImg/2013/04/22/13667110937.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('29', '201203870330', '201203870330', '周信罕', 'http://www.onegreen.net/QQ/UploadFiles/201202/2012020614005943.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('30', '201203870331', '201203870331', '周志秀', 'http://up.qqjia.com/z/14/tu17249_13.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族'), ('31', '201220120113', '201220120113', '刘宇飞', 'http://www.touxiang.cn/uploads/20131119/19-013113_648.jpg', '这家伙很懒并没有介绍~', '学霸,工大,吃货,懒癌,月光族');
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
